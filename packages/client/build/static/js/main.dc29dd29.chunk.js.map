{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","concat","App","_useState","useState","_useState2","_slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","solana","response","wrap","_context","prev","next","window","isPhantom","console","log","connect","onlyIfTrusted","sent","publicKey","toString","alert","t0","error","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","onInputChange","event","value","target","getProvider","connection","Connection","AnchorProvider","createGifAccount","_ref3","_callee3","provider","program","_context3","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","_ref4","_callee4","_context4","length","abrupt","addGif","useEffect","onLoad","_ref5","_callee5","_context5","addEventListener","removeEventListener","_ref6","_callee6","account","_context6","fetch","_jsx","className","children","_jsxs","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc29dd29.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { Program, AnchorProvider, web3 } from '@project-serum/anchor';\nimport { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js';\nimport React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport idl from './idl.json';\nimport kp from './keypair.json';\n\n// SystemProgramはSolanaランタイムへの参照です。\nconst { SystemProgram, Keypair } = web3;\n\n// GIFデータを保持するアカウントのキーペアを作成します。\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// IDLファイルからプログラムIDを取得します。\nconst programID = new PublicKey(idl.metadata.address);\n\n// ネットワークをDevnetに設定します。\nconst network = clusterApiUrl('devnet');\n\n// トランザクションが完了したときに通知方法を制御します。\nconst opts = {\n  preflightCommitment: 'processed',\n};\n// 定数を宣言します。\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // ユーザーのウォレットアドレスのstateを管理するためuseStateを使用する。\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const TEST_GIFS = [\n    'https://media.giphy.com/media/ZqlvCTNHpqrio/giphy.gif',\n    'https://media.giphy.com/media/bC9czlgCMtw4cj8RgH/giphy.gif',\n    'https://media.giphy.com/media/kC8N6DPOkbqWTxkNTe/giphy.gif',\n    'https://media.giphy.com/media/26n6Gx9moCgs1pUuk/giphy.gif',\n  ];\n\n  /*\n   * Phantom Walletが接続されているかどうかを確認するための関数です。\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString(),\n          );\n\n          /*\n           * walletAddressにユーザーのウォレットアドレスのstateを更新します。\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        window.alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(\n      connection,\n      window.solana,\n      opts.preflightCommitment,\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        'Created a new BaseAccount w/ address:',\n        baseAccount.publicKey.toString(),\n      );\n      await getGifList();\n    } catch (error) {\n      console.log('Error creating BaseAccount account:', error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log('No gif link given!');\n      return;\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('GIF successfully sent to program', inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log('Error sending GIF:', error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // プログラムアカウントが初期化されているかどうかチェックします。\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // アカウントが存在した場合、ユーザーはGIFを投稿することができます。\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* indexをキーとして使用し、GIFイメージとしてitem.gifLinkに変更しました。 */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  /*\n   * 初回のレンダリング時にのみ、Phantom Walletが接続されているかどうか確認します。\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey,\n      );\n\n      console.log('Got the account', account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log('Error in getGifList: ', error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 GIF Portal</p>\n          <p className=\"sub-text\">View your GIF collection ✨</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        <main className=\"main\">\n          {/* ウォレットが接続されている場合にrenderConnectedContainer関数を実行します。 */}\n          {walletAddress && renderConnectedContainer()}\n        </main>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}